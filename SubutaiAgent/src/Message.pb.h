// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef PROTOBUF_Message_2eproto__INCLUDED
#define PROTOBUF_Message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Subutai {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Message_2eproto();
void protobuf_AssignDesc_Message_2eproto();
void protobuf_ShutdownFile_Message_2eproto();

class Request;
class Request_env;
class Response;
class Response_NetworkInterface;
class Response_Container;

enum Request_RequestType {
  Request_RequestType_EXECUTE_REQUEST = 0,
  Request_RequestType_TERMINATE_REQUEST = 1,
  Request_RequestType_PS_REQUEST = 2,
  Request_RequestType_SET_INOTIFY_REQUEST = 3,
  Request_RequestType_UNSET_INOTIFY_REQUEST = 4,
  Request_RequestType_LIST_INOTIFY_REQUEST = 5
};
bool Request_RequestType_IsValid(int value);
const Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_EXECUTE_REQUEST;
const Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_LIST_INOTIFY_REQUEST;
const int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_RequestType_descriptor();
inline const ::std::string& Request_RequestType_Name(Request_RequestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_RequestType_descriptor(), value);
}
inline bool Request_RequestType_Parse(
    const ::std::string& name, Request_RequestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
enum Request_OutputType {
  Request_OutputType_NO = 0,
  Request_OutputType_RETURN = 1
};
bool Request_OutputType_IsValid(int value);
const Request_OutputType Request_OutputType_OutputType_MIN = Request_OutputType_NO;
const Request_OutputType Request_OutputType_OutputType_MAX = Request_OutputType_RETURN;
const int Request_OutputType_OutputType_ARRAYSIZE = Request_OutputType_OutputType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_OutputType_descriptor();
inline const ::std::string& Request_OutputType_Name(Request_OutputType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_OutputType_descriptor(), value);
}
inline bool Request_OutputType_Parse(
    const ::std::string& name, Request_OutputType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_OutputType>(
    Request_OutputType_descriptor(), name, value);
}
enum Response_ResponseType {
  Response_ResponseType_HEARTBEAT = 0,
  Response_ResponseType_EXECUTE_RESPONSE = 1,
  Response_ResponseType_EXECUTE_TIMEOUT = 2,
  Response_ResponseType_IN_QUEUE = 3,
  Response_ResponseType_TERMINATE_RESPONSE = 4,
  Response_ResponseType_PS_RESPONSE = 5,
  Response_ResponseType_SET_INOTIFY_RESPONSE = 6,
  Response_ResponseType_UNSET_INOTIFY_RESPONSE = 7,
  Response_ResponseType_LIST_INOTIFY_RESPONSE = 8,
  Response_ResponseType_INOTIFY_EVENT = 9
};
bool Response_ResponseType_IsValid(int value);
const Response_ResponseType Response_ResponseType_ResponseType_MIN = Response_ResponseType_HEARTBEAT;
const Response_ResponseType Response_ResponseType_ResponseType_MAX = Response_ResponseType_INOTIFY_EVENT;
const int Response_ResponseType_ResponseType_ARRAYSIZE = Response_ResponseType_ResponseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ResponseType_descriptor();
inline const ::std::string& Response_ResponseType_Name(Response_ResponseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ResponseType_descriptor(), value);
}
inline bool Response_ResponseType_Parse(
    const ::std::string& name, Response_ResponseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ResponseType>(
    Response_ResponseType_descriptor(), name, value);
}
enum Response_ContainerStatus {
  Response_ContainerStatus_RUNNING = 0,
  Response_ContainerStatus_STOPPED = 1,
  Response_ContainerStatus_FREEZED = 2
};
bool Response_ContainerStatus_IsValid(int value);
const Response_ContainerStatus Response_ContainerStatus_ContainerStatus_MIN = Response_ContainerStatus_RUNNING;
const Response_ContainerStatus Response_ContainerStatus_ContainerStatus_MAX = Response_ContainerStatus_FREEZED;
const int Response_ContainerStatus_ContainerStatus_ARRAYSIZE = Response_ContainerStatus_ContainerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* Response_ContainerStatus_descriptor();
inline const ::std::string& Response_ContainerStatus_Name(Response_ContainerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    Response_ContainerStatus_descriptor(), value);
}
inline bool Response_ContainerStatus_Parse(
    const ::std::string& name, Response_ContainerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Response_ContainerStatus>(
    Response_ContainerStatus_descriptor(), name, value);
}
// ===================================================================

class Request_env : public ::google::protobuf::Message {
 public:
  Request_env();
  virtual ~Request_env();

  Request_env(const Request_env& from);

  inline Request_env& operator=(const Request_env& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_env& default_instance();

  void Swap(Request_env* other);

  // implements Message ----------------------------------------------

  inline Request_env* New() const { return New(NULL); }

  Request_env* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_env& from);
  void MergeFrom(const Request_env& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request_env* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:Subutai.Request.env)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Request_env* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  inline Request* New() const { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_env env;

  typedef Request_RequestType RequestType;
  static const RequestType EXECUTE_REQUEST = Request_RequestType_EXECUTE_REQUEST;
  static const RequestType TERMINATE_REQUEST = Request_RequestType_TERMINATE_REQUEST;
  static const RequestType PS_REQUEST = Request_RequestType_PS_REQUEST;
  static const RequestType SET_INOTIFY_REQUEST = Request_RequestType_SET_INOTIFY_REQUEST;
  static const RequestType UNSET_INOTIFY_REQUEST = Request_RequestType_UNSET_INOTIFY_REQUEST;
  static const RequestType LIST_INOTIFY_REQUEST = Request_RequestType_LIST_INOTIFY_REQUEST;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static const RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static const RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static const int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  static inline const ::std::string& RequestType_Name(RequestType value) {
    return Request_RequestType_Name(value);
  }
  static inline bool RequestType_Parse(const ::std::string& name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  typedef Request_OutputType OutputType;
  static const OutputType NO = Request_OutputType_NO;
  static const OutputType RETURN = Request_OutputType_RETURN;
  static inline bool OutputType_IsValid(int value) {
    return Request_OutputType_IsValid(value);
  }
  static const OutputType OutputType_MIN =
    Request_OutputType_OutputType_MIN;
  static const OutputType OutputType_MAX =
    Request_OutputType_OutputType_MAX;
  static const int OutputType_ARRAYSIZE =
    Request_OutputType_OutputType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OutputType_descriptor() {
    return Request_OutputType_descriptor();
  }
  static inline const ::std::string& OutputType_Name(OutputType value) {
    return Request_OutputType_Name(value);
  }
  static inline bool OutputType_Parse(const ::std::string& name,
      OutputType* value) {
    return Request_OutputType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .Subutai.Request.RequestType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Subutai::Request_RequestType type() const;
  void set_type(::Subutai::Request_RequestType value);

  // required string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string commandId = 3;
  bool has_commandid() const;
  void clear_commandid();
  static const int kCommandIdFieldNumber = 3;
  const ::std::string& commandid() const;
  void set_commandid(const ::std::string& value);
  void set_commandid(const char* value);
  void set_commandid(const char* value, size_t size);
  ::std::string* mutable_commandid();
  ::std::string* release_commandid();
  void set_allocated_commandid(::std::string* commandid);

  // optional string workingDirectory = 4;
  bool has_workingdirectory() const;
  void clear_workingdirectory();
  static const int kWorkingDirectoryFieldNumber = 4;
  const ::std::string& workingdirectory() const;
  void set_workingdirectory(const ::std::string& value);
  void set_workingdirectory(const char* value);
  void set_workingdirectory(const char* value, size_t size);
  ::std::string* mutable_workingdirectory();
  ::std::string* release_workingdirectory();
  void set_allocated_workingdirectory(::std::string* workingdirectory);

  // optional string command = 5;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 5;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // repeated string args = 6;
  int args_size() const;
  void clear_args();
  static const int kArgsFieldNumber = 6;
  const ::std::string& args(int index) const;
  ::std::string* mutable_args(int index);
  void set_args(int index, const ::std::string& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  ::std::string* add_args();
  void add_args(const ::std::string& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // repeated .Subutai.Request.env environment = 7;
  int environment_size() const;
  void clear_environment();
  static const int kEnvironmentFieldNumber = 7;
  const ::Subutai::Request_env& environment(int index) const;
  ::Subutai::Request_env* mutable_environment(int index);
  ::Subutai::Request_env* add_environment();
  const ::google::protobuf::RepeatedPtrField< ::Subutai::Request_env >&
      environment() const;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Request_env >*
      mutable_environment();

  // optional .Subutai.Request.OutputType stdOut = 8;
  bool has_stdout() const;
  void clear_stdout();
  static const int kStdOutFieldNumber = 8;
  ::Subutai::Request_OutputType stdout() const;
  void set_stdout(::Subutai::Request_OutputType value);

  // optional .Subutai.Request.OutputType stdErr = 9;
  bool has_stderr() const;
  void clear_stderr();
  static const int kStdErrFieldNumber = 9;
  ::Subutai::Request_OutputType stderr() const;
  void set_stderr(::Subutai::Request_OutputType value);

  // optional string runAs = 10;
  bool has_runas() const;
  void clear_runas();
  static const int kRunAsFieldNumber = 10;
  const ::std::string& runas() const;
  void set_runas(const ::std::string& value);
  void set_runas(const char* value);
  void set_runas(const char* value, size_t size);
  ::std::string* mutable_runas();
  ::std::string* release_runas();
  void set_allocated_runas(::std::string* runas);

  // optional int32 timeout = 11;
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 11;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // optional int32 isDaemon = 12;
  bool has_isdaemon() const;
  void clear_isdaemon();
  static const int kIsDaemonFieldNumber = 12;
  ::google::protobuf::int32 isdaemon() const;
  void set_isdaemon(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Subutai.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_commandid();
  inline void clear_has_commandid();
  inline void set_has_workingdirectory();
  inline void clear_has_workingdirectory();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_stdout();
  inline void clear_has_stdout();
  inline void set_has_stderr();
  inline void clear_has_stderr();
  inline void set_has_runas();
  inline void clear_has_runas();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_isdaemon();
  inline void clear_has_isdaemon();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr commandid_;
  ::google::protobuf::internal::ArenaStringPtr workingdirectory_;
  int type_;
  int stdout_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Request_env > environment_;
  ::google::protobuf::internal::ArenaStringPtr runas_;
  int stderr_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 isdaemon_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Response_NetworkInterface : public ::google::protobuf::Message {
 public:
  Response_NetworkInterface();
  virtual ~Response_NetworkInterface();

  Response_NetworkInterface(const Response_NetworkInterface& from);

  inline Response_NetworkInterface& operator=(const Response_NetworkInterface& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_NetworkInterface& default_instance();

  void Swap(Response_NetworkInterface* other);

  // implements Message ----------------------------------------------

  inline Response_NetworkInterface* New() const { return New(NULL); }

  Response_NetworkInterface* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_NetworkInterface& from);
  void MergeFrom(const Response_NetworkInterface& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_NetworkInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string interfaceName = 1;
  bool has_interfacename() const;
  void clear_interfacename();
  static const int kInterfaceNameFieldNumber = 1;
  const ::std::string& interfacename() const;
  void set_interfacename(const ::std::string& value);
  void set_interfacename(const char* value);
  void set_interfacename(const char* value, size_t size);
  ::std::string* mutable_interfacename();
  ::std::string* release_interfacename();
  void set_allocated_interfacename(::std::string* interfacename);

  // optional string ip = 2;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 2;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional string mac = 3;
  bool has_mac() const;
  void clear_mac();
  static const int kMacFieldNumber = 3;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // @@protoc_insertion_point(class_scope:Subutai.Response.NetworkInterface)
 private:
  inline void set_has_interfacename();
  inline void clear_has_interfacename();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_mac();
  inline void clear_has_mac();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr interfacename_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Response_NetworkInterface* default_instance_;
};
// -------------------------------------------------------------------

class Response_Container : public ::google::protobuf::Message {
 public:
  Response_Container();
  virtual ~Response_Container();

  Response_Container(const Response_Container& from);

  inline Response_Container& operator=(const Response_Container& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response_Container& default_instance();

  void Swap(Response_Container* other);

  // implements Message ----------------------------------------------

  inline Response_Container* New() const { return New(NULL); }

  Response_Container* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response_Container& from);
  void MergeFrom(const Response_Container& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response_Container* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string hostname = 1;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 1;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional string id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // repeated .Subutai.Response.NetworkInterface interfaces = 3;
  int interfaces_size() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 3;
  const ::Subutai::Response_NetworkInterface& interfaces(int index) const;
  ::Subutai::Response_NetworkInterface* mutable_interfaces(int index);
  ::Subutai::Response_NetworkInterface* add_interfaces();
  const ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >&
      interfaces() const;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >*
      mutable_interfaces();

  // optional .Subutai.Response.ContainerStatus status = 4;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::Subutai::Response_ContainerStatus status() const;
  void set_status(::Subutai::Response_ContainerStatus value);

  // @@protoc_insertion_point(class_scope:Subutai.Response.Container)
 private:
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface > interfaces_;
  int status_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Response_Container* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Response_NetworkInterface NetworkInterface;
  typedef Response_Container Container;

  typedef Response_ResponseType ResponseType;
  static const ResponseType HEARTBEAT = Response_ResponseType_HEARTBEAT;
  static const ResponseType EXECUTE_RESPONSE = Response_ResponseType_EXECUTE_RESPONSE;
  static const ResponseType EXECUTE_TIMEOUT = Response_ResponseType_EXECUTE_TIMEOUT;
  static const ResponseType IN_QUEUE = Response_ResponseType_IN_QUEUE;
  static const ResponseType TERMINATE_RESPONSE = Response_ResponseType_TERMINATE_RESPONSE;
  static const ResponseType PS_RESPONSE = Response_ResponseType_PS_RESPONSE;
  static const ResponseType SET_INOTIFY_RESPONSE = Response_ResponseType_SET_INOTIFY_RESPONSE;
  static const ResponseType UNSET_INOTIFY_RESPONSE = Response_ResponseType_UNSET_INOTIFY_RESPONSE;
  static const ResponseType LIST_INOTIFY_RESPONSE = Response_ResponseType_LIST_INOTIFY_RESPONSE;
  static const ResponseType INOTIFY_EVENT = Response_ResponseType_INOTIFY_EVENT;
  static inline bool ResponseType_IsValid(int value) {
    return Response_ResponseType_IsValid(value);
  }
  static const ResponseType ResponseType_MIN =
    Response_ResponseType_ResponseType_MIN;
  static const ResponseType ResponseType_MAX =
    Response_ResponseType_ResponseType_MAX;
  static const int ResponseType_ARRAYSIZE =
    Response_ResponseType_ResponseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseType_descriptor() {
    return Response_ResponseType_descriptor();
  }
  static inline const ::std::string& ResponseType_Name(ResponseType value) {
    return Response_ResponseType_Name(value);
  }
  static inline bool ResponseType_Parse(const ::std::string& name,
      ResponseType* value) {
    return Response_ResponseType_Parse(name, value);
  }

  typedef Response_ContainerStatus ContainerStatus;
  static const ContainerStatus RUNNING = Response_ContainerStatus_RUNNING;
  static const ContainerStatus STOPPED = Response_ContainerStatus_STOPPED;
  static const ContainerStatus FREEZED = Response_ContainerStatus_FREEZED;
  static inline bool ContainerStatus_IsValid(int value) {
    return Response_ContainerStatus_IsValid(value);
  }
  static const ContainerStatus ContainerStatus_MIN =
    Response_ContainerStatus_ContainerStatus_MIN;
  static const ContainerStatus ContainerStatus_MAX =
    Response_ContainerStatus_ContainerStatus_MAX;
  static const int ContainerStatus_ARRAYSIZE =
    Response_ContainerStatus_ContainerStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ContainerStatus_descriptor() {
    return Response_ContainerStatus_descriptor();
  }
  static inline const ::std::string& ContainerStatus_Name(ContainerStatus value) {
    return Response_ContainerStatus_Name(value);
  }
  static inline bool ContainerStatus_Parse(const ::std::string& name,
      ContainerStatus* value) {
    return Response_ContainerStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Subutai.Response.ResponseType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Subutai::Response_ResponseType type() const;
  void set_type(::Subutai::Response_ResponseType value);

  // optional string hostname = 2;
  bool has_hostname() const;
  void clear_hostname();
  static const int kHostnameFieldNumber = 2;
  const ::std::string& hostname() const;
  void set_hostname(const ::std::string& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  ::std::string* mutable_hostname();
  ::std::string* release_hostname();
  void set_allocated_hostname(::std::string* hostname);

  // optional string id = 3;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // repeated .Subutai.Response.NetworkInterface interfaces = 4;
  int interfaces_size() const;
  void clear_interfaces();
  static const int kInterfacesFieldNumber = 4;
  const ::Subutai::Response_NetworkInterface& interfaces(int index) const;
  ::Subutai::Response_NetworkInterface* mutable_interfaces(int index);
  ::Subutai::Response_NetworkInterface* add_interfaces();
  const ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >&
      interfaces() const;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >*
      mutable_interfaces();

  // repeated .Subutai.Response.Container containers = 5;
  int containers_size() const;
  void clear_containers();
  static const int kContainersFieldNumber = 5;
  const ::Subutai::Response_Container& containers(int index) const;
  ::Subutai::Response_Container* mutable_containers(int index);
  ::Subutai::Response_Container* add_containers();
  const ::google::protobuf::RepeatedPtrField< ::Subutai::Response_Container >&
      containers() const;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Response_Container >*
      mutable_containers();

  // repeated string ips = 6;
  int ips_size() const;
  void clear_ips();
  static const int kIpsFieldNumber = 6;
  const ::std::string& ips(int index) const;
  ::std::string* mutable_ips(int index);
  void set_ips(int index, const ::std::string& value);
  void set_ips(int index, const char* value);
  void set_ips(int index, const char* value, size_t size);
  ::std::string* add_ips();
  void add_ips(const ::std::string& value);
  void add_ips(const char* value);
  void add_ips(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ips() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ips();

  // repeated string macs = 7;
  int macs_size() const;
  void clear_macs();
  static const int kMacsFieldNumber = 7;
  const ::std::string& macs(int index) const;
  ::std::string* mutable_macs(int index);
  void set_macs(int index, const ::std::string& value);
  void set_macs(int index, const char* value);
  void set_macs(int index, const char* value, size_t size);
  ::std::string* add_macs();
  void add_macs(const ::std::string& value);
  void add_macs(const char* value);
  void add_macs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& macs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_macs();

  // optional string commandId = 8;
  bool has_commandid() const;
  void clear_commandid();
  static const int kCommandIdFieldNumber = 8;
  const ::std::string& commandid() const;
  void set_commandid(const ::std::string& value);
  void set_commandid(const char* value);
  void set_commandid(const char* value, size_t size);
  ::std::string* mutable_commandid();
  ::std::string* release_commandid();
  void set_allocated_commandid(::std::string* commandid);

  // optional int32 pid = 9;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 9;
  ::google::protobuf::int32 pid() const;
  void set_pid(::google::protobuf::int32 value);

  // optional int32 responseNumber = 10;
  bool has_responsenumber() const;
  void clear_responsenumber();
  static const int kResponseNumberFieldNumber = 10;
  ::google::protobuf::int32 responsenumber() const;
  void set_responsenumber(::google::protobuf::int32 value);

  // optional string stdOut = 11;
  bool has_stdout() const;
  void clear_stdout();
  static const int kStdOutFieldNumber = 11;
  const ::std::string& stdout() const;
  void set_stdout(const ::std::string& value);
  void set_stdout(const char* value);
  void set_stdout(const char* value, size_t size);
  ::std::string* mutable_stdout();
  ::std::string* release_stdout();
  void set_allocated_stdout(::std::string* stdout);

  // optional string stdErr = 12;
  bool has_stderr() const;
  void clear_stderr();
  static const int kStdErrFieldNumber = 12;
  const ::std::string& stderr() const;
  void set_stderr(const ::std::string& value);
  void set_stderr(const char* value);
  void set_stderr(const char* value, size_t size);
  ::std::string* mutable_stderr();
  ::std::string* release_stderr();
  void set_allocated_stderr(::std::string* stderr);

  // optional int32 exitCode = 13;
  bool has_exitcode() const;
  void clear_exitcode();
  static const int kExitCodeFieldNumber = 13;
  ::google::protobuf::int32 exitcode() const;
  void set_exitcode(::google::protobuf::int32 value);

  // repeated string configPoints = 14;
  int configpoints_size() const;
  void clear_configpoints();
  static const int kConfigPointsFieldNumber = 14;
  const ::std::string& configpoints(int index) const;
  ::std::string* mutable_configpoints(int index);
  void set_configpoints(int index, const ::std::string& value);
  void set_configpoints(int index, const char* value);
  void set_configpoints(int index, const char* value, size_t size);
  ::std::string* add_configpoints();
  void add_configpoints(const ::std::string& value);
  void add_configpoints(const char* value);
  void add_configpoints(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& configpoints() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_configpoints();

  // @@protoc_insertion_point(class_scope:Subutai.Response)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_hostname();
  inline void clear_has_hostname();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_commandid();
  inline void clear_has_commandid();
  inline void set_has_pid();
  inline void clear_has_pid();
  inline void set_has_responsenumber();
  inline void clear_has_responsenumber();
  inline void set_has_stdout();
  inline void clear_has_stdout();
  inline void set_has_stderr();
  inline void clear_has_stderr();
  inline void set_has_exitcode();
  inline void clear_has_exitcode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr hostname_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface > interfaces_;
  ::google::protobuf::RepeatedPtrField< ::Subutai::Response_Container > containers_;
  int type_;
  ::google::protobuf::int32 pid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ips_;
  ::google::protobuf::RepeatedPtrField< ::std::string> macs_;
  ::google::protobuf::internal::ArenaStringPtr commandid_;
  ::google::protobuf::internal::ArenaStringPtr stdout_;
  ::google::protobuf::int32 responsenumber_;
  ::google::protobuf::int32 exitcode_;
  ::google::protobuf::internal::ArenaStringPtr stderr_;
  ::google::protobuf::RepeatedPtrField< ::std::string> configpoints_;
  friend void  protobuf_AddDesc_Message_2eproto();
  friend void protobuf_AssignDesc_Message_2eproto();
  friend void protobuf_ShutdownFile_Message_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Request_env

// required string key = 1;
inline bool Request_env::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_env::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_env::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_env::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Request_env::key() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.env.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_env::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.env.key)
}
inline void Request_env::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.env.key)
}
inline void Request_env::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.env.key)
}
inline ::std::string* Request_env::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.env.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_env::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_env::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.env.key)
}

// required string value = 2;
inline bool Request_env::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_env::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request_env::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request_env::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Request_env::value() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.env.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_env::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.env.value)
}
inline void Request_env::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.env.value)
}
inline void Request_env::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.env.value)
}
inline ::std::string* Request_env::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.env.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request_env::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request_env::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.env.value)
}

// -------------------------------------------------------------------

// Request

// required .Subutai.Request.RequestType type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Subutai::Request_RequestType Request::type() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.type)
  return static_cast< ::Subutai::Request_RequestType >(type_);
}
inline void Request::set_type(::Subutai::Request_RequestType value) {
  assert(::Subutai::Request_RequestType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Request.type)
}

// required string id = 2;
inline bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Request::id() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.id)
}
inline void Request::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.id)
}
inline void Request::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.id)
}
inline ::std::string* Request::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.id)
}

// required string commandId = 3;
inline bool Request::has_commandid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_commandid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_commandid() {
  commandid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commandid();
}
inline const ::std::string& Request::commandid() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.commandId)
  return commandid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_commandid(const ::std::string& value) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.commandId)
}
inline void Request::set_commandid(const char* value) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.commandId)
}
inline void Request::set_commandid(const char* value, size_t size) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.commandId)
}
inline ::std::string* Request::mutable_commandid() {
  set_has_commandid();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.commandId)
  return commandid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_commandid() {
  clear_has_commandid();
  return commandid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_commandid(::std::string* commandid) {
  if (commandid != NULL) {
    set_has_commandid();
  } else {
    clear_has_commandid();
  }
  commandid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commandid);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.commandId)
}

// optional string workingDirectory = 4;
inline bool Request::has_workingdirectory() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_workingdirectory() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_workingdirectory() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_workingdirectory() {
  workingdirectory_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_workingdirectory();
}
inline const ::std::string& Request::workingdirectory() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.workingDirectory)
  return workingdirectory_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_workingdirectory(const ::std::string& value) {
  set_has_workingdirectory();
  workingdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.workingDirectory)
}
inline void Request::set_workingdirectory(const char* value) {
  set_has_workingdirectory();
  workingdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.workingDirectory)
}
inline void Request::set_workingdirectory(const char* value, size_t size) {
  set_has_workingdirectory();
  workingdirectory_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.workingDirectory)
}
inline ::std::string* Request::mutable_workingdirectory() {
  set_has_workingdirectory();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.workingDirectory)
  return workingdirectory_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_workingdirectory() {
  clear_has_workingdirectory();
  return workingdirectory_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_workingdirectory(::std::string* workingdirectory) {
  if (workingdirectory != NULL) {
    set_has_workingdirectory();
  } else {
    clear_has_workingdirectory();
  }
  workingdirectory_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workingdirectory);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.workingDirectory)
}

// optional string command = 5;
inline bool Request::has_command() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_command() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_command() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& Request::command() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.command)
}
inline void Request::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.command)
}
inline void Request::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.command)
}
inline ::std::string* Request::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_command() {
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.command)
}

// repeated string args = 6;
inline int Request::args_size() const {
  return args_.size();
}
inline void Request::clear_args() {
  args_.Clear();
}
inline const ::std::string& Request::args(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Request.args)
  return args_.Get(index);
}
inline ::std::string* Request::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Request.args)
  return args_.Mutable(index);
}
inline void Request::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subutai.Request.args)
  args_.Mutable(index)->assign(value);
}
inline void Request::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subutai.Request.args)
}
inline void Request::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.args)
}
inline ::std::string* Request::add_args() {
  return args_.Add();
}
inline void Request::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subutai.Request.args)
}
inline void Request::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subutai.Request.args)
}
inline void Request::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subutai.Request.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request::args() const {
  // @@protoc_insertion_point(field_list:Subutai.Request.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Request.args)
  return &args_;
}

// repeated .Subutai.Request.env environment = 7;
inline int Request::environment_size() const {
  return environment_.size();
}
inline void Request::clear_environment() {
  environment_.Clear();
}
inline const ::Subutai::Request_env& Request::environment(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Request.environment)
  return environment_.Get(index);
}
inline ::Subutai::Request_env* Request::mutable_environment(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Request.environment)
  return environment_.Mutable(index);
}
inline ::Subutai::Request_env* Request::add_environment() {
  // @@protoc_insertion_point(field_add:Subutai.Request.environment)
  return environment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Subutai::Request_env >&
Request::environment() const {
  // @@protoc_insertion_point(field_list:Subutai.Request.environment)
  return environment_;
}
inline ::google::protobuf::RepeatedPtrField< ::Subutai::Request_env >*
Request::mutable_environment() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Request.environment)
  return &environment_;
}

// optional .Subutai.Request.OutputType stdOut = 8;
inline bool Request::has_stdout() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Request::set_has_stdout() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Request::clear_has_stdout() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Request::clear_stdout() {
  stdout_ = 0;
  clear_has_stdout();
}
inline ::Subutai::Request_OutputType Request::stdout() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.stdOut)
  return static_cast< ::Subutai::Request_OutputType >(stdout_);
}
inline void Request::set_stdout(::Subutai::Request_OutputType value) {
  assert(::Subutai::Request_OutputType_IsValid(value));
  set_has_stdout();
  stdout_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Request.stdOut)
}

// optional .Subutai.Request.OutputType stdErr = 9;
inline bool Request::has_stderr() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Request::set_has_stderr() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Request::clear_has_stderr() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Request::clear_stderr() {
  stderr_ = 0;
  clear_has_stderr();
}
inline ::Subutai::Request_OutputType Request::stderr() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.stdErr)
  return static_cast< ::Subutai::Request_OutputType >(stderr_);
}
inline void Request::set_stderr(::Subutai::Request_OutputType value) {
  assert(::Subutai::Request_OutputType_IsValid(value));
  set_has_stderr();
  stderr_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Request.stdErr)
}

// optional string runAs = 10;
inline bool Request::has_runas() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Request::set_has_runas() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Request::clear_has_runas() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Request::clear_runas() {
  runas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_runas();
}
inline const ::std::string& Request::runas() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.runAs)
  return runas_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_runas(const ::std::string& value) {
  set_has_runas();
  runas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Request.runAs)
}
inline void Request::set_runas(const char* value) {
  set_has_runas();
  runas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Request.runAs)
}
inline void Request::set_runas(const char* value, size_t size) {
  set_has_runas();
  runas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Request.runAs)
}
inline ::std::string* Request::mutable_runas() {
  set_has_runas();
  // @@protoc_insertion_point(field_mutable:Subutai.Request.runAs)
  return runas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_runas() {
  clear_has_runas();
  return runas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_runas(::std::string* runas) {
  if (runas != NULL) {
    set_has_runas();
  } else {
    clear_has_runas();
  }
  runas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), runas);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Request.runAs)
}

// optional int32 timeout = 11;
inline bool Request::has_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Request::set_has_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Request::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Request::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 Request::timeout() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.timeout)
  return timeout_;
}
inline void Request::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Request.timeout)
}

// optional int32 isDaemon = 12;
inline bool Request::has_isdaemon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Request::set_has_isdaemon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Request::clear_has_isdaemon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Request::clear_isdaemon() {
  isdaemon_ = 0;
  clear_has_isdaemon();
}
inline ::google::protobuf::int32 Request::isdaemon() const {
  // @@protoc_insertion_point(field_get:Subutai.Request.isDaemon)
  return isdaemon_;
}
inline void Request::set_isdaemon(::google::protobuf::int32 value) {
  set_has_isdaemon();
  isdaemon_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Request.isDaemon)
}

// -------------------------------------------------------------------

// Response_NetworkInterface

// optional string interfaceName = 1;
inline bool Response_NetworkInterface::has_interfacename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_NetworkInterface::set_has_interfacename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_NetworkInterface::clear_has_interfacename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_NetworkInterface::clear_interfacename() {
  interfacename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_interfacename();
}
inline const ::std::string& Response_NetworkInterface::interfacename() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.NetworkInterface.interfaceName)
  return interfacename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_NetworkInterface::set_interfacename(const ::std::string& value) {
  set_has_interfacename();
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.NetworkInterface.interfaceName)
}
inline void Response_NetworkInterface::set_interfacename(const char* value) {
  set_has_interfacename();
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.NetworkInterface.interfaceName)
}
inline void Response_NetworkInterface::set_interfacename(const char* value, size_t size) {
  set_has_interfacename();
  interfacename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.NetworkInterface.interfaceName)
}
inline ::std::string* Response_NetworkInterface::mutable_interfacename() {
  set_has_interfacename();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.NetworkInterface.interfaceName)
  return interfacename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response_NetworkInterface::release_interfacename() {
  clear_has_interfacename();
  return interfacename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_NetworkInterface::set_allocated_interfacename(::std::string* interfacename) {
  if (interfacename != NULL) {
    set_has_interfacename();
  } else {
    clear_has_interfacename();
  }
  interfacename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interfacename);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.NetworkInterface.interfaceName)
}

// optional string ip = 2;
inline bool Response_NetworkInterface::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_NetworkInterface::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_NetworkInterface::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_NetworkInterface::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Response_NetworkInterface::ip() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.NetworkInterface.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_NetworkInterface::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.NetworkInterface.ip)
}
inline void Response_NetworkInterface::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.NetworkInterface.ip)
}
inline void Response_NetworkInterface::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.NetworkInterface.ip)
}
inline ::std::string* Response_NetworkInterface::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.NetworkInterface.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response_NetworkInterface::release_ip() {
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_NetworkInterface::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.NetworkInterface.ip)
}

// optional string mac = 3;
inline bool Response_NetworkInterface::has_mac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response_NetworkInterface::set_has_mac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response_NetworkInterface::clear_has_mac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response_NetworkInterface::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mac();
}
inline const ::std::string& Response_NetworkInterface::mac() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.NetworkInterface.mac)
  return mac_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_NetworkInterface::set_mac(const ::std::string& value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.NetworkInterface.mac)
}
inline void Response_NetworkInterface::set_mac(const char* value) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.NetworkInterface.mac)
}
inline void Response_NetworkInterface::set_mac(const char* value, size_t size) {
  set_has_mac();
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.NetworkInterface.mac)
}
inline ::std::string* Response_NetworkInterface::mutable_mac() {
  set_has_mac();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.NetworkInterface.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response_NetworkInterface::release_mac() {
  clear_has_mac();
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_NetworkInterface::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    set_has_mac();
  } else {
    clear_has_mac();
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.NetworkInterface.mac)
}

// -------------------------------------------------------------------

// Response_Container

// optional string hostname = 1;
inline bool Response_Container::has_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response_Container::set_has_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response_Container::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response_Container::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& Response_Container::hostname() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.Container.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_Container::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.Container.hostname)
}
inline void Response_Container::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.Container.hostname)
}
inline void Response_Container::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.Container.hostname)
}
inline ::std::string* Response_Container::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.Container.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response_Container::release_hostname() {
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_Container::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.Container.hostname)
}

// optional string id = 2;
inline bool Response_Container::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response_Container::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response_Container::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response_Container::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Response_Container::id() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.Container.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_Container::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.Container.id)
}
inline void Response_Container::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.Container.id)
}
inline void Response_Container::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.Container.id)
}
inline ::std::string* Response_Container::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.Container.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response_Container::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response_Container::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.Container.id)
}

// repeated .Subutai.Response.NetworkInterface interfaces = 3;
inline int Response_Container::interfaces_size() const {
  return interfaces_.size();
}
inline void Response_Container::clear_interfaces() {
  interfaces_.Clear();
}
inline const ::Subutai::Response_NetworkInterface& Response_Container::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Response.Container.interfaces)
  return interfaces_.Get(index);
}
inline ::Subutai::Response_NetworkInterface* Response_Container::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Response.Container.interfaces)
  return interfaces_.Mutable(index);
}
inline ::Subutai::Response_NetworkInterface* Response_Container::add_interfaces() {
  // @@protoc_insertion_point(field_add:Subutai.Response.Container.interfaces)
  return interfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >&
Response_Container::interfaces() const {
  // @@protoc_insertion_point(field_list:Subutai.Response.Container.interfaces)
  return interfaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >*
Response_Container::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Response.Container.interfaces)
  return &interfaces_;
}

// optional .Subutai.Response.ContainerStatus status = 4;
inline bool Response_Container::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Response_Container::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Response_Container::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Response_Container::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Subutai::Response_ContainerStatus Response_Container::status() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.Container.status)
  return static_cast< ::Subutai::Response_ContainerStatus >(status_);
}
inline void Response_Container::set_status(::Subutai::Response_ContainerStatus value) {
  assert(::Subutai::Response_ContainerStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Response.Container.status)
}

// -------------------------------------------------------------------

// Response

// optional .Subutai.Response.ResponseType type = 1;
inline bool Response::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Response::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Response::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Response::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Subutai::Response_ResponseType Response::type() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.type)
  return static_cast< ::Subutai::Response_ResponseType >(type_);
}
inline void Response::set_type(::Subutai::Response_ResponseType value) {
  assert(::Subutai::Response_ResponseType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Response.type)
}

// optional string hostname = 2;
inline bool Response::has_hostname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Response::set_has_hostname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Response::clear_has_hostname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Response::clear_hostname() {
  hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hostname();
}
inline const ::std::string& Response::hostname() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.hostname)
  return hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_hostname(const ::std::string& value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.hostname)
}
inline void Response::set_hostname(const char* value) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.hostname)
}
inline void Response::set_hostname(const char* value, size_t size) {
  set_has_hostname();
  hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.hostname)
}
inline ::std::string* Response::mutable_hostname() {
  set_has_hostname();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.hostname)
  return hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_hostname() {
  clear_has_hostname();
  return hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_hostname(::std::string* hostname) {
  if (hostname != NULL) {
    set_has_hostname();
  } else {
    clear_has_hostname();
  }
  hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hostname);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.hostname)
}

// optional string id = 3;
inline bool Response::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Response::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Response::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Response::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& Response::id() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.id)
}
inline void Response::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.id)
}
inline void Response::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.id)
}
inline ::std::string* Response::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.id)
}

// repeated .Subutai.Response.NetworkInterface interfaces = 4;
inline int Response::interfaces_size() const {
  return interfaces_.size();
}
inline void Response::clear_interfaces() {
  interfaces_.Clear();
}
inline const ::Subutai::Response_NetworkInterface& Response::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Response.interfaces)
  return interfaces_.Get(index);
}
inline ::Subutai::Response_NetworkInterface* Response::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Response.interfaces)
  return interfaces_.Mutable(index);
}
inline ::Subutai::Response_NetworkInterface* Response::add_interfaces() {
  // @@protoc_insertion_point(field_add:Subutai.Response.interfaces)
  return interfaces_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >&
Response::interfaces() const {
  // @@protoc_insertion_point(field_list:Subutai.Response.interfaces)
  return interfaces_;
}
inline ::google::protobuf::RepeatedPtrField< ::Subutai::Response_NetworkInterface >*
Response::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Response.interfaces)
  return &interfaces_;
}

// repeated .Subutai.Response.Container containers = 5;
inline int Response::containers_size() const {
  return containers_.size();
}
inline void Response::clear_containers() {
  containers_.Clear();
}
inline const ::Subutai::Response_Container& Response::containers(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Response.containers)
  return containers_.Get(index);
}
inline ::Subutai::Response_Container* Response::mutable_containers(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Response.containers)
  return containers_.Mutable(index);
}
inline ::Subutai::Response_Container* Response::add_containers() {
  // @@protoc_insertion_point(field_add:Subutai.Response.containers)
  return containers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Subutai::Response_Container >&
Response::containers() const {
  // @@protoc_insertion_point(field_list:Subutai.Response.containers)
  return containers_;
}
inline ::google::protobuf::RepeatedPtrField< ::Subutai::Response_Container >*
Response::mutable_containers() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Response.containers)
  return &containers_;
}

// repeated string ips = 6;
inline int Response::ips_size() const {
  return ips_.size();
}
inline void Response::clear_ips() {
  ips_.Clear();
}
inline const ::std::string& Response::ips(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Response.ips)
  return ips_.Get(index);
}
inline ::std::string* Response::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Response.ips)
  return ips_.Mutable(index);
}
inline void Response::set_ips(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subutai.Response.ips)
  ips_.Mutable(index)->assign(value);
}
inline void Response::set_ips(int index, const char* value) {
  ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subutai.Response.ips)
}
inline void Response::set_ips(int index, const char* value, size_t size) {
  ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.ips)
}
inline ::std::string* Response::add_ips() {
  return ips_.Add();
}
inline void Response::add_ips(const ::std::string& value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subutai.Response.ips)
}
inline void Response::add_ips(const char* value) {
  ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subutai.Response.ips)
}
inline void Response::add_ips(const char* value, size_t size) {
  ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subutai.Response.ips)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::ips() const {
  // @@protoc_insertion_point(field_list:Subutai.Response.ips)
  return ips_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Response.ips)
  return &ips_;
}

// repeated string macs = 7;
inline int Response::macs_size() const {
  return macs_.size();
}
inline void Response::clear_macs() {
  macs_.Clear();
}
inline const ::std::string& Response::macs(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Response.macs)
  return macs_.Get(index);
}
inline ::std::string* Response::mutable_macs(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Response.macs)
  return macs_.Mutable(index);
}
inline void Response::set_macs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subutai.Response.macs)
  macs_.Mutable(index)->assign(value);
}
inline void Response::set_macs(int index, const char* value) {
  macs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subutai.Response.macs)
}
inline void Response::set_macs(int index, const char* value, size_t size) {
  macs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.macs)
}
inline ::std::string* Response::add_macs() {
  return macs_.Add();
}
inline void Response::add_macs(const ::std::string& value) {
  macs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subutai.Response.macs)
}
inline void Response::add_macs(const char* value) {
  macs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subutai.Response.macs)
}
inline void Response::add_macs(const char* value, size_t size) {
  macs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subutai.Response.macs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::macs() const {
  // @@protoc_insertion_point(field_list:Subutai.Response.macs)
  return macs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_macs() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Response.macs)
  return &macs_;
}

// optional string commandId = 8;
inline bool Response::has_commandid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Response::set_has_commandid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Response::clear_has_commandid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Response::clear_commandid() {
  commandid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_commandid();
}
inline const ::std::string& Response::commandid() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.commandId)
  return commandid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_commandid(const ::std::string& value) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.commandId)
}
inline void Response::set_commandid(const char* value) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.commandId)
}
inline void Response::set_commandid(const char* value, size_t size) {
  set_has_commandid();
  commandid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.commandId)
}
inline ::std::string* Response::mutable_commandid() {
  set_has_commandid();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.commandId)
  return commandid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_commandid() {
  clear_has_commandid();
  return commandid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_commandid(::std::string* commandid) {
  if (commandid != NULL) {
    set_has_commandid();
  } else {
    clear_has_commandid();
  }
  commandid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), commandid);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.commandId)
}

// optional int32 pid = 9;
inline bool Response::has_pid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Response::set_has_pid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Response::clear_has_pid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Response::clear_pid() {
  pid_ = 0;
  clear_has_pid();
}
inline ::google::protobuf::int32 Response::pid() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.pid)
  return pid_;
}
inline void Response::set_pid(::google::protobuf::int32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Response.pid)
}

// optional int32 responseNumber = 10;
inline bool Response::has_responsenumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Response::set_has_responsenumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Response::clear_has_responsenumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Response::clear_responsenumber() {
  responsenumber_ = 0;
  clear_has_responsenumber();
}
inline ::google::protobuf::int32 Response::responsenumber() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.responseNumber)
  return responsenumber_;
}
inline void Response::set_responsenumber(::google::protobuf::int32 value) {
  set_has_responsenumber();
  responsenumber_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Response.responseNumber)
}

// optional string stdOut = 11;
inline bool Response::has_stdout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Response::set_has_stdout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Response::clear_has_stdout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Response::clear_stdout() {
  stdout_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stdout();
}
inline const ::std::string& Response::stdout() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.stdOut)
  return stdout_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_stdout(const ::std::string& value) {
  set_has_stdout();
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.stdOut)
}
inline void Response::set_stdout(const char* value) {
  set_has_stdout();
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.stdOut)
}
inline void Response::set_stdout(const char* value, size_t size) {
  set_has_stdout();
  stdout_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.stdOut)
}
inline ::std::string* Response::mutable_stdout() {
  set_has_stdout();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.stdOut)
  return stdout_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_stdout() {
  clear_has_stdout();
  return stdout_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_stdout(::std::string* stdout) {
  if (stdout != NULL) {
    set_has_stdout();
  } else {
    clear_has_stdout();
  }
  stdout_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stdout);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.stdOut)
}

// optional string stdErr = 12;
inline bool Response::has_stderr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Response::set_has_stderr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Response::clear_has_stderr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Response::clear_stderr() {
  stderr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_stderr();
}
inline const ::std::string& Response::stderr() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.stdErr)
  return stderr_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_stderr(const ::std::string& value) {
  set_has_stderr();
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Subutai.Response.stdErr)
}
inline void Response::set_stderr(const char* value) {
  set_has_stderr();
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Subutai.Response.stdErr)
}
inline void Response::set_stderr(const char* value, size_t size) {
  set_has_stderr();
  stderr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.stdErr)
}
inline ::std::string* Response::mutable_stderr() {
  set_has_stderr();
  // @@protoc_insertion_point(field_mutable:Subutai.Response.stdErr)
  return stderr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_stderr() {
  clear_has_stderr();
  return stderr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_stderr(::std::string* stderr) {
  if (stderr != NULL) {
    set_has_stderr();
  } else {
    clear_has_stderr();
  }
  stderr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stderr);
  // @@protoc_insertion_point(field_set_allocated:Subutai.Response.stdErr)
}

// optional int32 exitCode = 13;
inline bool Response::has_exitcode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Response::set_has_exitcode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Response::clear_has_exitcode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Response::clear_exitcode() {
  exitcode_ = 0;
  clear_has_exitcode();
}
inline ::google::protobuf::int32 Response::exitcode() const {
  // @@protoc_insertion_point(field_get:Subutai.Response.exitCode)
  return exitcode_;
}
inline void Response::set_exitcode(::google::protobuf::int32 value) {
  set_has_exitcode();
  exitcode_ = value;
  // @@protoc_insertion_point(field_set:Subutai.Response.exitCode)
}

// repeated string configPoints = 14;
inline int Response::configpoints_size() const {
  return configpoints_.size();
}
inline void Response::clear_configpoints() {
  configpoints_.Clear();
}
inline const ::std::string& Response::configpoints(int index) const {
  // @@protoc_insertion_point(field_get:Subutai.Response.configPoints)
  return configpoints_.Get(index);
}
inline ::std::string* Response::mutable_configpoints(int index) {
  // @@protoc_insertion_point(field_mutable:Subutai.Response.configPoints)
  return configpoints_.Mutable(index);
}
inline void Response::set_configpoints(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Subutai.Response.configPoints)
  configpoints_.Mutable(index)->assign(value);
}
inline void Response::set_configpoints(int index, const char* value) {
  configpoints_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Subutai.Response.configPoints)
}
inline void Response::set_configpoints(int index, const char* value, size_t size) {
  configpoints_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Subutai.Response.configPoints)
}
inline ::std::string* Response::add_configpoints() {
  return configpoints_.Add();
}
inline void Response::add_configpoints(const ::std::string& value) {
  configpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Subutai.Response.configPoints)
}
inline void Response::add_configpoints(const char* value) {
  configpoints_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Subutai.Response.configPoints)
}
inline void Response::add_configpoints(const char* value, size_t size) {
  configpoints_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Subutai.Response.configPoints)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::configpoints() const {
  // @@protoc_insertion_point(field_list:Subutai.Response.configPoints)
  return configpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_configpoints() {
  // @@protoc_insertion_point(field_mutable_list:Subutai.Response.configPoints)
  return &configpoints_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Subutai

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Subutai::Request_RequestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Subutai::Request_RequestType>() {
  return ::Subutai::Request_RequestType_descriptor();
}
template <> struct is_proto_enum< ::Subutai::Request_OutputType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Subutai::Request_OutputType>() {
  return ::Subutai::Request_OutputType_descriptor();
}
template <> struct is_proto_enum< ::Subutai::Response_ResponseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Subutai::Response_ResponseType>() {
  return ::Subutai::Response_ResponseType_descriptor();
}
template <> struct is_proto_enum< ::Subutai::Response_ContainerStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Subutai::Response_ContainerStatus>() {
  return ::Subutai::Response_ContainerStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Message_2eproto__INCLUDED
