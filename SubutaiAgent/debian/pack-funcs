#!/bin/sh
set -e
# Check if any deb file exists!!!

checkPackageVersion() {
	SOURCE="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/agent/"
  CONTROL="$SOURCE/SubutaiAgent/debian/Agent/DEBIAN/control"

  lineNumberVersion=$(sed -n '/Version:/=' $CONTROL)
  lineVersion=$(sed $lineNumberVersion!d $CONTROL)
  version_new=$(echo $lineVersion | awk -F":" '{split($2,a," ");print a[1]}')
  versionFirst_new=$(echo $version_new | awk -F"." '{print $1}')
  versionSecond_new=$(echo $version_new | awk -F"." '{print $2}')

  version_tmp=$(echo $version_new | awk -F"." '{print $3}')
  versionThird_new=$(echo $version_tmp | awk -F"-" '{print $1}')
  patch_new=$(echo $version_tmp | awk -F"-" '{print $2}')

  deb_name=`ls -lt | awk '{ print $9 }' | grep .deb | head -1`
  version_prev=$(echo $deb_name | awk -F"_" '{print $2}')
  versionFirst_prev=$(echo $version_prev | awk -F"." '{print $1}')
  versionSecond_prev=$(echo $version_prev | awk -F"." '{print $2}')

  version_tmp_prev=$(echo $version_prev | awk -F"." '{print $3}')
  versionThird_prev=$(echo $version_tmp_prev | awk -F"-" '{print $1}')
  patch_prev=$(echo $version_tmp_prev | awk -F"-" '{print $2}')

  if [ -z $patch_prev ]; then
    patch_prev=0
  fi
  if [ -z $patch_new ]; then
    patch_new=0
  fi
  echo "version in control:$version_new current version:$version_prev "

  if [ $versionFirst_new -lt $versionFirst_prev ]; then
    echo "major: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
    exit 0;
  elif [ $versionFirst_new -eq $versionFirst_prev ]; then
     if [ $versionSecond_new -lt $versionSecond_prev ]; then
        echo "minor: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
        exit 0;
     elif [ $versionSecond_new -eq $versionSecond_prev ]; then
        if [ $versionThird_new -lt $versionThird_prev ]; then
            echo "micro: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
            exit 0;
        elif [ $versionThird_new -eq $versionThird_prev ]; then 
          if [ $patch_new -lt $patch_prev  ]; then
               echo "patch: current version is greater than the version in control file. Version in control file:$version_new, current version:$version_prev"
           		 exit 0;
          elif [ $patch_new -eq $patch_prev  ]; then
               echo "patch: current version is equal to the version in control file. Version in control file:$version_new, current version:$version_prev"
           		 exit 0;
          fi
        fi
     fi
  fi
}


removePreviousVersionSource() {
	if [ -f ../autoconf/src/SubutaiAgent.o ] ; then
		      rm ../autoconf/src/*.o
	fi

	if [ -f ../autoconf/src/subutai-agent ] ; then
		      rm ../autoconf/src/subutai-agent
	fi

	if [ -f ../autoconf/src/SubutaiAgent.cpp ] ; then
		      rm ../autoconf/src/*.cpp
	fi
	if [ -f ../autoconf/src/SubutaiThread.h ] ; then
		      rm ../autoconf/src/*.h
	fi
	if [ -f ../autoconf/src/pugixml.hpp ] ; then
		      rm ../autoconf/src/*.hpp
	fi
}


getNewVersionSource() {
	SOURCE="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/agent/"
	cp $SOURCE/SubutaiAgent/src/* ../../Agent/autoconf/src/
	cp $SOURCE/SubutaiAgent/debian/Agent/autoconf/* ../../Agent/autoconf/src/
}

runMake() {
	sh -c 'cd ../autoconf && aclocal && autoconf && automake && autoreconf --force --install && ./configure &&  make'
	if ls *.deb ; then
	  rm  *.deb
	fi
}

getSourcesToRelevantDirectories() {
	SOURCE="/var/lib/jenkins/jobs/master.get_branch_repo/workspace/agent/"
	fileName=`ls | grep subutai|  awk '{print $1}' | head -1`

	strip ../autoconf/src/subutai-agent
	cp ../autoconf/src/subutai-agent $fileName/sbin/
	cp $SOURCE/SubutaiAgent/config/agent.xml $fileName/etc/subutai-agent/

	if [ -f $fileName/DEBIAN/control ] ; then
		rm $fileName/DEBIAN/*
	fi
	cp $SOURCE/SubutaiAgent/debian/Agent/DEBIAN/* $fileName/DEBIAN/
}

createDebian() {
	fileName=`ls | grep subutai|  awk '{print $1}' | head -1`
	lineNumberVersion=$(sed -n '/Version:/=' $fileName/DEBIAN/control)
	lineVersion=$(sed $lineNumberVersion!d $fileName/DEBIAN/control)
	version=$(echo $lineVersion | awk -F":" '{split($2,a," ");print a[1]}')
	packageName="subutai-agent_"$version"_amd64"
	mv $fileName $packageName
	echo $fileName
	echo $lineNumberVersion
	echo $lineVersion
	echo $version
	echo $packageName $fileName

	find ./$packageName -name "*~" -print0 | xargs -0 rm -rf
	md5sum `find ./$packageName -type f | awk '/.\//{ print substr($0, 3) }'` >> $packageName/DEBIAN/md5sums
	dpkg-deb -z8 -Zgzip --build $packageName/

	#when deb is created copy new deb to Automation_ISO/Packages folder.
	cp $packageName.deb /var/lib/jenkins/Automation/Automation_ISO/Packages/agent/
}


generateRepoPackage() {
  #Basic path definitions
  BASE="/var/lib/jenkins/jobs/master.agent/Agent/deb"
  TARGET="/var/lib/jenkins/Automation/Automation_ISO/Packages/agent"
  PACK="/var/lib/jenkins/Automation/Automation_ISO/mgmt-repo/template-repo-package/"
  ISOPATH="/var/lib/jenkins/Automation/Automation_ISO/work/custom-iso/pool/extras/"

  pushd $BASE

 #get package latest package from ISOPATH to remove it
  removedPackage=`ls -lt $ISOPATH | grep "subutai-repo-agent" | awk '{ print $9 }' | grep .deb | head -1`
  echo "removedPackageName: $removedPackage" 
   if [ "$removedPackage" != "" ]; then
      rm $ISOPATH/$removedPackage
   fi

  #get package full name, for example:subutai-hadoop_1.0.12_all.deb
  currentPackage=`ls -lt $TARGET | awk '{ print $9 }' | grep .deb | head -1`
  echo "CurrentPackageName: $currentPackage"

  #check package starts with subutai tag
  if [[ "$currentPackage" == "subutai"* ]]; then
     shortCurrentPackage=`echo "$currentPackage" | awk '{print substr($1,9); }'  | awk '{print substr($0, 0, length($0)-4)}'`
     echo "shortCurrentPackage: $shortCurrentPackage"
  fi

  purePackageName=`echo $shortCurrentPackage | awk -F "." '{print $1}' | awk '{print substr($0, 0, length($0)-2)}'`
  echo "purePackageName: $purePackageName"

  #check purePackageName is empty or not
  if [ -z $purePackageName ] || [ "$purePackageName" == "" ]; then
     echo "Pure package name is empty. Aborting..."
     exit 1
  fi

  #starting to genereate template repo package
  generateTemplateRepo
  echo "Repo wrapper package Successfully created."

  popd

}


#generate Template repo package structure
generateTemplateRepo() {
  pushd $BASE
  templateName="temp"
  archType="amd64"
  #check temp folder does exist or not
  if [ -d "$templateName" ]; then
    rm -rf "$BASE/$templateName"
  fi

  #creating main folders  
  mkdir -p $BASE/$templateName/DEBIAN
  mkdir -p $BASE/$templateName/repo/ksks/amd64/trusty

  #generating and filling control file 
  touch $BASE/$templateName/DEBIAN/control
  chmod 755 $BASE/$templateName/DEBIAN/control
  echo "Package: subutai-repo-$purePackageName" >> $BASE/$templateName/DEBIAN/control
  echo "Version: $version_new" >> $BASE/$templateName/DEBIAN/control
  echo "Architecture: $archType" >> $BASE/$templateName/DEBIAN/control
  echo "Maintainer: <subut.ai>" >> $BASE/$templateName/DEBIAN/control
  echo "Priority: optional" >> $BASE/$templateName/DEBIAN/control
  echo "Description: This is subutai repo $purePackageName wrapper package" >> $BASE/$templateName/DEBIAN/control
  echo "Homepage: http://www.safehaus.org" >> $BASE/$templateName/DEBIAN/control
  echo "Section: devel" >> $BASE/$templateName/DEBIAN/control
 
  cp $currentPackage $BASE/$templateName/repo/ksks/amd64/trusty/
  mv $BASE/$templateName/ $BASE/subutai-repo-$shortCurrentPackage

  CURRENTPACK=$BASE/subutai-repo-$shortCurrentPackage
  echo "CURRENTPACK: $CURRENTPACK"

  dpkg-deb --build $CURRENTPACK
  mv $BASE/subutai-repo-"$shortCurrentPackage".deb $ISOPATH
  rm -rf $BASE/subutai-repo-$shortCurrentPackage
  rm -rf $BASE/$templateName
  popd
}

